var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var models = require('config/models');

/**
 * Created by Sven on 7/6/2016.
 */
/* PATH: host_url:8080/account/sendCode
 *
 * INPUT:
 * 'phone_number'
 *
 * OUTPUT:
 *  JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *  'object_id' : upon successful send code and register phone in database(only for debug purposes)
 *
 *
 *  1 -> Successfully register phone in database
 * -1 -> Fail to send validation code to the user
 * -6 -> Incorrect phone_number format
 * -7 -> Required field not set
 */
exports.sendCode = function(pn,area_code,callback) {
    var config = require('./config');
    var twilio = require('twilio');
    var client = new twilio.RestClient(config.accountSid, config.authToken);

    var objectid = '';
    var phone_number = pn;

    if (!phone_number || !area_code) {
        console.log('pm is '+ phone_number);
        console.log('ac is '+ area_code);
        callback({
            'code': "-7",
            'msg': "Required field not set"
        });
        return;
    }

    if (phone_number.trim().length == 0 || phone_number.trim().length != 10 || !/^\d+$/.test(phone_number)) {
        callback({
            'code': "-6",
            'msg': "Incorrect phone_number format"
        });
        return;
    }

    var code = Math.floor(1000 + Math.random() * 9000);

    models.User.find({phone_number: phone_number},function(err,users){
        if(users.length == 0){

            console.log('This is a new user!');
            console.log('pm is '+ phone_number);

            var newUser = new models.User ({
                token: '',
                phone_number: phone_number,
                code: code,
                vertify_flag: 'false',
                hashed_password: '',
                email: '',
                first_name: '',
                last_name: '',
                sex: '',
                driver_flag: 'false',
                driver_license: '',
                plate_number: '',
                colour: '',
                car_model: '',
                salt: '',
            });

            newUser.save(function(error){
                console.log('registered in database');
                models.User.find({phone_number: phone_number},function(err,users){
                    objectid = users[0]._id;
                })
                console.log('the user object_id is ' + objectid);
            })
        }else{
            objectid = users[0]._id;
            console.log('id is '+ objectid);
            console.log('This is a returning user!');
            models.User.findByIdAndUpdate(objectid, {$set: {code: code}},function(err, result){
                if(err){
                    console.log(err);
                }
                console.log("RESULT: " + result);
            });
            console.log('the user object_id is ' + objectid);
        }
    })

    client.sendSms({
        to: area_code + phone_number,
        from: config.twilioNumber,
        body: '[V-GO Group] Your verification code is ' + code
    }, function (error, message) {
        // The HTTP request to Twilio will run asynchronously. This callback
        // function will be called when a response is received from Twilio
        // The "error" variable will contain error information, if any.
        // If the request was successful, this value will be "falsy"
        if (!error) {
            console.log('Success! The SID for this SMS message is:');
            console.log(message.sid);

            console.log('Message sent to:');
            console.log(phone_number);

            console.log('Message sent on:');
            console.log(message.dateCreated);

            callback({
                'code': "1",
                'msg': "Successfully register phone in database, the objectid is "+ objectid,
                'object_id': objectid
            });
            return;
        } else {
            console.log('Oops! There was an error.');
            console.log(error);
            callback({
                'code': "-1",
                'msg': "fail to send validation code to the user~"
            });
            return;
        }
    })
}

/* PATH: host_url:8080/account/verify
 *
 * INPUT:
 * 'code'
 * 'phone_number'
 *
 * OUTPUT:
 *  JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *  'object_id' : upon successful send code and register phone in database(only for debug purposes)
 *
 *
 *  1 -> Successfully register phone in database
 * -1 -> Incorrect validation code
 * -2 -> Incorrect phone_number
 * -6 -> Incorrect phone_number format
 * -7 -> Required field not set
 */
exports.verify = function(code,phone_number,callback) {
    if (!code) {
        callback({
            'code': "-7",
            'msg': "Required field not set"
        });
        return;
    }
    console.log('verify code is '+ code);
    console.log('trim code is '+ code.trim());
    console.log('length code is '+ code.trim().length);
    if (code.trim().length == 0 || code.trim().length != 4 || !/^\d+$/.test(code)) {
        callback({
            'code': "-6",
            'msg': "Incorrect validation code format"
        });
        return;
    }
    console.log("-> valid verify code is recived");
    models.User.find({phone_number: phone_number},function(err,users){
        console.log('users.length '+ users.length);
        if(users.length == 0){
            callback({
                'code': "-2",
                'msg': "Incorrect phone_number"
            });
            return;
        }else{
            var dbcode = users[0].code;
            if(dbcode == code){
                models.User.findOneAndUpdate({phone_number: phone_number}, {$set: {vertify_flag: true}},function(err, result){
                    if(err){
                        console.log(err);
                    }
                    console.log("RESULT: " + result);
                });
                callback({
                    'code': "1",
                    'msg': phone_number + " has been validated",
                    'object_id': users[0]._id
                });
            }else{
                callback({
                    'code': "-1",
                    'msg': "Incorrect validation code"
                });
                return;
            }
        }
    })
}


/* PATH: host_url:8080/account/register
 *
 * INPUT:
 * 'objectid'
 * 'email'
 * 'password'
 * 'first_name'
 * 'last_name'
 * 'sex'          (1 for male 0 for female)
 * 'driver_license'
 * 'plate_number'
 * 'colour'
 * 'car_model' format example(2016-HONDA-SEDAN)
 *
 * OUTPUT: JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *
 *  1 -> Successfully registered
 * -2 -> Invalid objectid
 * -3 -> User have not yet vertify
 * -4 -> Password is too weak
 * -5 -> Invalid email format
 * -6 -> Invalid sex field (only 0/1 allow)
 * -300 -> Invalid first name format
 * -301 -> Invalid last name format
 */
exports.register = function(objectid, email, password, first_name, last_name, sex, driver_license, plate_number, colour, car_model, callback) {

    const MIN_PWD_LENGTH = 8;


    var emailValidation = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if (email != null) {
        if (!emailValidation.test(email)) {
            callback({
                'code': "-5",
                'msg': "Invalid email format"
            });
            return;
        }
    }

    if (!(password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)
        && password.match(/[0-9]/)
        && password.length >= MIN_PWD_LENGTH)) {
        callback({
            'code': "-4",
            'msg': "Password is too weak"
        });
        return;
    }

    var nameValidation = /^[a-zA-Z ]{2,30}$/;
    if (!nameValidation.test(first_name)) {
        callback({
            'code': "-300",
            'msg': "Invalid first name format"
        });
        return;
    }

    if (!nameValidation.test(last_name)) {
        callback({
            'code': "-301",
            'msg': "Invalid last name format"
        });
        return;
    }

    if (sex != '0' && sex != '1') {
        callback({
            'code': "-6",
            'msg': "Invalid sex field"
        });
        return;
    }

    var driver_flag = false;
    if (!driver_license || !plate_number || !colour || !car_model) {
        driver_flag = false;
        console.log('lack info to be a driver');
    } else {
        driver_flag = true;
        console.log('enough info to be a driver');
    }


    // password encrytion
    var temp = rand(160, 36);
    var newpass = temp + password;
    var token = crypto.createHash('sha512').update(email + rand).digest("hex");
    var hashed_password = crypto.createHash('sha512').update(newpass).digest("hex");
    console.log(token);
    models.User.findById(objectid, function (err, users) {
        console.log(users);
        if (users.length == 0) {
            callback({
                'code': "-2",
                'msg': "Invalid objectid"
            });
            return;
        } else {
            var uvf = users.vertity_flag;
            if (uvf == false) {
                callback({
                    'code': "-3",
                    'msg': "User have not yet vertify"
                });
                return;
            } else {
                if (driver_flag == true) {
                    console.log('register as both driver and user');
                    var query = {
                        token: token,
                        hashed_password: hashed_password,
                        email: email,
                        first_name: first_name,
                        last_name: last_name,
                        sex: sex,
                        driver_flag: driver_flag,
                        driver_license: driver_license,
                        plate_number: plate_number,
                        colour: colour,
                        car_model: car_model,
                        salt: temp,
                        temp_str: String
                    }
                } else {
                    console.log('register only as user');
                    var query = {
                        token: token,
                        hashed_password: hashed_password,
                        email: email,
                        first_name: first_name,
                        last_name: last_name,
                        sex: sex,
                        driver_flag: driver_flag,
                        salt: temp,
                        temp_str: String
                    }
                }

                models.User.findByIdAndUpdate(objectid, {$set: query}, function (err, result) {
                    if (err) {
                        console.log(err);
                    }
                    console.log("RESULT: " + result);
                });
                callback({
                    'code': "1",
                    'msg': 'Successfully registered'
                });
                return;
            }
        }
    })
}

/* PATH: host_url:8080/account/getUserInfo
 *
 * INPUT:
 * 'get_my_info': '1' -> get user info of current logged-in user (myself), anything other than 1 OR not specifying this input -> get user info by following two identification
 * 'phone_number' or 'user_id' get user info by either one of these identifications (only one input will be accepted per call)
 *
 * OUTPUT: JSON object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *
 *   1 -> Get user information successfully
 *  -1 -> phone_number or user_id does not exist
 *  -2 -> Either phone_number or user_id is not specified or undefined
 *  -3 -> You may only specify one user identifications, either phone_number or user_id(object_id)
 *  -4 -> No session, please login first
 *
 * ** Upon successful request, you will also be return following fields in the same JSON oject:
 *
 * 'user_id': String
 * 'phone_number': String
 * 'email': String
 * 'first_name': String
 * 'last_name': String
 * 'sex': String (0 -> female, 1 -> male)
 * 'driver_flag': Boolean (true -> driver, false -> not-a-driver)
 *
 * ** The following info will be returned if driver_flag is true,
 *    otherwise empty strings will be returned
 *
 * 'driver_license': String
 * 'plate_number': String
 * 'colour': String
 * 'car_model': String (eg. "2017-Ferrari-Coupe")
 *
 */

exports.getUserInfo = function(phone_number, user_id, get_my_info, sess, callback) {

    if(get_my_info == 1){
        var user_id_in_sess = sess.user_id
        if(user_id_in_sess){
            models.User.find({_id: user_id_in_sess},function(err,users) {
                if (!users) {
                    callback({
                        'code': "-1",
                        'msg': "user_id does not exist"
                    });
                }else{
                    callback({
                        'code': "1",
                        'msg': "Get user information successfully",
                        'user_id': user_id,
                        'phone_number': users[0].phone_number,
                        'email': users[0].email,
                        'first_name': users[0].first_name,
                        'last_name': users[0].last_name,
                        'sex': users[0].sex,
                        'driver_flag': users[0].driver_flag,
                        'driver_license': users[0].driver_license,
                        'plate_number': users[0].plate_number,
                        'colour': users[0].colour,
                        'car_model': users[0].car_model
                    });
                }
            });
            return;
        }else{
            callback({
                'code': "-4",
                'msg': 'No session, please login first'
            });
            return;
        }
    }

    if(phone_number && user_id){
        callback({
            'code': "-3",
            'msg': 'You can only specify one user identifications, either phone_number or user_id(object_id)'
        });
        return;
    }else if(!phone_number && !user_id){
        callback({
            'code': "-2",
            'msg': 'Either phone_number or user_id is not specified or undefined'
        });
        return;
    }else if(phone_number){
        models.User.find({phone_number: phone_number},function(err,users) {
            if (users.length == 0) {
                callback({
                    'code': "-1",
                    'msg': "Phone number does not exist"
                });
                return;
            }else{
                callback({
                    'code': "1",
                    'msg': "Get user information successfully",
                    'user_id': users[0]._id,
                    'phone_number': phone_number,
                    'email': users[0].email,
                    'first_name': users[0].first_name,
                    'last_name': users[0].last_name,
                    'sex': users[0].sex,
                    'driver_flag': users[0].driver_flag,
                    'driver_license': users[0].driver_license,
                    'plate_number': users[0].plate_number,
                    'colour': users[0].colour,
                    'car_model': users[0].car_model
                });
                return;
            }
        });
    }else if(user_id){
        models.User.find({_id: user_id},function(err,users) {
            if (!users) {
                callback({
                    'code': "-1",
                    'msg': "user_id does not exist"
                });
                return;
            }else{
                callback({
                    'code': "1",
                    'msg': "Get user information successfully",
                    'user_id': user_id,
                    'phone_number': users[0].phone_number,
                    'email': users[0].email,
                    'first_name': users[0].first_name,
                    'last_name': users[0].last_name,
                    'sex': users[0].sex,
                    'driver_flag': users[0].driver_flag,
                    'driver_license': users[0].driver_license,
                    'plate_number': users[0].plate_number,
                    'colour': users[0].colour,
                    'car_model': users[0].car_model
                });
                return;
            }
        });
    }
}

