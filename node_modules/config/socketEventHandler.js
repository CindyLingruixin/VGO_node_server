var models = require('config/models');

onlineUsersList = [];
module.exports = function(io)
{

    io.on('connection', function(socket){
        /* on connect */
        console.log('-> a user connected through socket')
        // add new connected user to the onlineUser list
        onlineUsersList.push({
                user_id : socket.handshake.session.user_id,
                socket_id : socket.id
            })
        console.log('** current online users: ' + onlineUsersList.length)

        /* on disconnect */
        socket.on('disconnect', function(){
            console.log('-> user disconnected from socket');

            // remove disconnected user from the onlineUser list
            for(var i=0;i<onlineUsersList.length;i++){
                if(onlineUsersList[i].socket_id == socket.id){
                    onlineUsersList.splice(i,1);
                }
            }
            console.log('** current online users: ' + onlineUsersList.length)
        });

        /* on chat room mesasge */
        socket.on('chat message', function(msg){
            console.log("-> chat message received");
            console.log(" ** session_id: " + socket.handshake.session.id);
            console.log(" ** user_id: " + socket.handshake.session.user_id);

            io.emit('chat message', msg);
        });

        /* on private message */
        socket.on('private message', function(obj) {
            console.log("-> private message received");
            console.log(" ** session_id: " + socket.handshake.session.id);
            console.log(" ** user_id: " + socket.handshake.session.user_id);

            var receiver_user_id = obj.receiver_user_id;
            var receiver_socket_id;

            for (var i = 0; i < onlineUsersList.length; i++) {
                if (onlineUsersList[i].user_id == receiver_user_id) {
                    receiver_socket_id = onlineUsersList[i].socket_id;
                }
            }
            if (receiver_socket_id === undefined) {
                // save the message to unread database
                console.log("** receiver is offline, will save message to db");
            }else{
                socket.broadcast.to(receiver_socket_id).emit('private message',{ message:obj.message });
            }
            // save message to database
            var newRecord = new models.ChatHistory
            ({
                message: obj.message
            });
            newRecord.save(function (err) {
                console.log("-> private message saved");
            });
            
        });
    });
};