var models = require('config/models');

onlineUsersList = [];
module.exports = function(io)
{

    io.on('connection', function(socket){
        /* on connect */
        console.log('-> a user connected through socket');
        console.log('** socket_id: ' + socket.id);
        console.log('** session_id: ' + socket.handshake.session.id);
        console.log('** user_id: ' + socket.handshake.session.user_id);

        // add new connected user to the onlineUser list
        onlineUsersList.push({
                user_id : socket.handshake.session.user_id,
                socket_id : socket.id
            })
        console.log('** current online users: ' + onlineUsersList.length + "\n")

        /* on disconnect */
        socket.on('disconnect', function(){
            console.log('-> user disconnected from socket');
            console.log('** socket_id: ' + this.id);

            // remove disconnected user from the onlineUser list
            for(var i=0;i<onlineUsersList.length;i++){
                if(onlineUsersList[i].socket_id == socket.id){
                    onlineUsersList.splice(i,1);
                }
            }
            console.log('** current online users: ' + onlineUsersList.length + "\n")
        });

        /* on chat room mesasge */
        socket.on('chat message', function(msg){
            console.log("-> chat message received");
            console.log("** socket_id: " + this.id);
            console.log("** session_id: " + socket.handshake.session.id);
            console.log("** user_id: " + socket.handshake.session.user_id + "\n");

            io.emit('chat message', msg);
        });

        /* on private message */
        socket.on('private message', function(obj) {

            if(socket.handshake.session.user_id) {

                if (obj.receiver_user_id && obj.message) {

                    models.User.find({_id: obj.receiver_user_id}, function (err, users) {

                        if (users.length != 0) {

                            console.log("-> private message received by server");
                            console.log("** socket_id: " + this.id);
                            console.log("** session_id: " + socket.handshake.session.id);
                            console.log("** user_id: " + socket.handshake.session.user_id);

                            var sender_user_id = socket.handshake.session.user_id;
                            var receiver_user_id = obj.receiver_user_id;
                            var receiver_socket_id;

                            for (var i = 0; i < onlineUsersList.length; i++) {
                                if (onlineUsersList[i].user_id == receiver_user_id) {
                                    receiver_socket_id = onlineUsersList[i].socket_id;
                                }
                            }
                            if (receiver_socket_id === undefined) {
                                // save the message to unread database
                                console.log("** receiver is offline");
                            } else {
                                socket.broadcast.to(receiver_socket_id).emit('private message',
                                    {sender_user_id: sender_user_id,
                                            message: obj.message});
                                console.log("** private message delivered");
                            }
                            // save message to database
                            var newRecord = new models.ChatHistory
                            ({
                                sender_user_id: sender_user_id,
                                receiver_user_id: receiver_user_id,
                                message: obj.message
                            });
                            newRecord.save(function (err) {
                                if(err){
                                    console.log("** error: private message is not saved \n");
                                }else {
                                    console.log("** private message saved \n");
                                }
                            });
                        } else {
                            console.log("-> invalid receiver_user_id");
                            socket.broadcast.to(socket.id).emit('server error', {
                                code: "-3",
                                msg: "Invalid receiver_user_id"
                            });
                        }
                    });
                } else {
                    console.log("-> required field not set");
                    socket.broadcast.to(socket.id).emit('server error', {
                        code: "-2",
                        msg: "Required field not set"
                    });
                }
            }else{
                console.log("-> fail to authenticate");
                socket.broadcast.to(socket.id).emit('server error', {
                    code: "-1",
                    msg: "Failed to authenticate"
                });
            }
        });
    });
};