var models = require('config/models');

// Difference between UTC TimeZone and Pacific TimeZone
var PST_DIFFERENCE = -7;

/* Add a new contact for current logged-in user
 *
 * PATH: host_url:8080/add_contact
 *
 * INPUT: 'other_user_id' : the user_id of the new contact of which you want to add
 *
 * OUTPUT:
 *  JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *
 *   1 -> New contact is saved successfully
 *  -1 -> Failed to authenticate, please login first
 *  -2 -> other_user_id is empty or undefined
 *  -3 -> You cannot add yourself as a new contact
 *  -4 -> This contact does not exist in database
 *  -5 -> You've already added this contact, you cannot add the same contact twice
 *  -6 -> Error occurs, new contact is not saved
 */
exports.addContact = function(sess, other_user_id, callback) {

    var my_user_id = sess.user_id;

    if(!my_user_id) {

        callback({
            code: "-1",
            msg: "Failed to authenticate, please login first",
        });
        return;

    }else if(!other_user_id) {

        callback({
            code: "-2",
            msg: "other_user_id is empty or undefined",
        });
        return;

    }else if(my_user_id.toString().trim() == other_user_id.toString().trim()) {

        callback({
            code: "-3",
            msg: "You cannot add yourself as a new contact",
        });
        return;

    }else{

        models.User.find({_id: other_user_id},function (err, users) {

            if (!users) {

                callback({
                    code: "-4",
                    msg: "This contact does not exist in database",
                });
                return;

            }else{

                models.ChatContact.find({$and : [ { my_user_id : my_user_id },
                    { other_user_id : other_user_id } ]}, function (err, contacts) {
                    
                    if(contacts.length > 0){
                        callback({
                            code: "-5",
                            msg: "You've already added this contact, you cannot add the same contact twice",
                        });
                        return;  
                        
                    }else{

                        var newContact = new models.ChatContact ({
                            my_user_id: my_user_id,
                            other_user_id: other_user_id,
                            last_msg: "",
                            last_msg_date_time: "",
                            number_of_unread_msg: 0
                        });

                        newContact.save(function(error){
                            if(error){
                                console.log("-> error: new contact is not saved \n");

                                callback({
                                    code: "-6",
                                    msg: "Error occurs, new contact is not saved",
                                });
                                return;

                            }else{
                                console.log("-> new contact is saved \n");

                                callback({
                                    code: "1",
                                    msg: "New contact is saved successfully",
                                });
                                return;
                            }
                        });
                    }
                });
            }
        });
    }
}


/* Ask server for the contact list of current logged-in user
 *
 * PATH: host_url:8080/get_contact_list
 *
 * INPUT: None
 *
 * OUTPUT: JSON Array
 *  ** 1st JSON Object always contains
 *  'code' : respond code
 *  'msg' : respond message
 *  'number_of_contact' : number of contacts returning
 *
 *  'code' & 'msg':
 *  1 -> Get contact list successfully
 * -1 -> Failed to authenticate, please login first
 * -2 -> You currently have no contact in your contact list
 *
 *  ** 2nd and the rest of the JSON Objects (if there is any) contain
 *  'other_user_id' : the user_id of your contact
 *  'last_msg' : the last message you've sent or received
 *  'last_msg_date_time' : the datetime(10 digit unix format) of last message you've sent or received
 *  'number_of_unread_msg' : (int) number of unread messages
 */
exports.getContactList = function(sess, callback) {

    var jsonAry = [];
    var my_user_id = sess.user_id;

    if(!my_user_id){

        jsonAry.push({
            code: "-1",
            msg: "Failed to authenticate, please login first",
            number_of_contact: "0"
        });
        callback(jsonAry);
        return;

    }else{

        models.ChatContact.find({my_user_id: my_user_id},function (err, contacts) {

            if(contacts.length == 0){

                jsonAry.push({
                    code: "-2",
                    msg: "You currently have no contact in your contact list",
                    number_of_contact: "0"
                });
                callback(jsonAry);
                return;

            }else{

                jsonAry.push({
                    code: "1",
                    msg: "Get contact list successfully",
                    number_of_contact: contacts.length
                });

                for(var i=0; i<contacts.length; i++) {
                    jsonAry.push({
                        other_user_id: contacts[i].other_user_id,
                        last_msg: contacts[i].last_msg,
                        last_msg_date_time: contacts[i].last_msg_date_time,
                        number_of_unread_msg: contacts[i].number_of_unread_msg
                    });
                }
                callback(jsonAry);
                return;
            }
        });
    }
}

/* Get single chat contact information of one specific user
 *
 * PATH: host_url:8080/get_single_contact
 *
 * INPUT: 'other_user_id' : the user_id of the contact info you want to get
 *
 * OUTPUT:
 *  JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *
 *   1 -> Get contact successufully
 *  -1 -> Failed to authenticate, please login first
 *  -2 -> other_user_id is empty or undefined
 *  -3 -> other_user_id does not exist in database
 *
 *  Upon successful request you will be given the follwings within the same Json object:
 *  'last_msg" : last updated send/received message with this contact
 *  'last_msg_date_time' : last updated datetime(10 digit unix format) of send/received message with this contact
 *  'number_of_unread_msg' : (int) last updated number of unread messages
 */
exports.getSingleContact = function(sess, other_user_id, callback) {

    var my_user_id = sess.user_id;

    if (!my_user_id) {

        callback({
            code: "-1",
            msg: "Failed to authenticate, please login first"
        });
        return;

    } else if (!other_user_id){

        callback({
            code: "-2",
            msg: "Empty or undefined other_user_id"
        });
        return;

    }else{

        models.ChatContact.find({ $and :[{my_user_id: my_user_id}, {other_user_id: other_user_id} ] },function (err, contacts) {
            if(contacts){
                if(contacts.length != 0){
                    callback({
                        code: "1",
                        msg: "Get contact successufully",
                        last_msg : contacts[0].last_msg,
                        last_msg_date_time : contacts[0].last_msg_date_time,
                        number_of_unread_msg : contacts[0].number_of_unread_msg
                    });
                    return;
                }
            }
            callback({
                code: "-3",
                msg: "other_user_id does not exist in your contact list, please add this contact first"
            });
            return;
        });
    }
}

/* Notifify the server that you have read all the unread messages for this contact
 *
 * PATH: host_url:8080/read_all_message
 *
 * INPUT: 'other_user_id' : the user_id of the of other contact
 *
 * OUTPUT:
 *  JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *
 *   1 -> All unread messages have been read, value set to 0
 *  -1 -> Failed to authenticate, please login first
 *  -2 -> other_user_id is empty or undefined
 *  -3 -> other_user_id does not exist in database
 *
 *  Upon successful request you will be given the follwings within the same Json object:
 *  'last_msg" : last updated send/received message with this contact
 *  'last_msg_date_time' : last updated datetime(10 digit unix format) of send/received message with this contact
 *  'number_of_unread_msg' : (int) last updated number of unread messages
 */
exports.readAllMessage = function(sess, other_user_id, callback) {

    var my_user_id = sess.user_id;

    if (!my_user_id) {

        callback({
            code: "-1",
            msg: "Failed to authenticate, please login first"
        });
        return;

    } else if (!other_user_id){

        callback({
            code: "-2",
            msg: "Empty or undefined other_user_id"
        });
        return;

    }else{

        models.ChatContact.find({ $and :[{my_user_id: my_user_id}, {other_user_id: other_user_id} ] },function (err, contacts) {
            if(contacts){
                if(contacts.length != 0){
                    contacts[0].number_of_unread_msg = 0;
                    contacts[0].save();
                    callback({
                        code: "1",
                        msg: "All unread messages have been read, value set to 0",
                    });
                    return;
                }
            }
            callback({
                code: "-3",
                msg: "other_user_id does not exist in your contact list, please add this contact first"
            });
            return;
        });
    }
}

/* Ask server for a number (between 1 to 100)
 * of chat histories(in order of old to new) between the caller and the other user
 *
 * PATH: host_url:8080/chat_history
 *
 * INPUT:
 *  'other_user_id' : the user id of the other user
 *  'number_of_message' : number of messages requesting
 *
 * OUTPUT: JSON Array
 *  ** 1st JSON Object always contains
 *  'code' : respond code
 *  'msg' : respond message
 *  'number_of_message' : number of message returning
 *
 *  'code' & 'msg':
 *  1 -> Seccess
 * -1 -> Failed to authenticate, please login first
 * -2 -> Requested number of messages is invalid: must be an integer between 1 and 100
 * -3 -> Invalid other_user_id
 * -4 -> No record found
 * -7 -> Required field not set
 *
 *  ** 2nd and the rest of the JSON Objects (if there is any) contain
 *  'is_your_message' : you sent -> 1, you received -> 0
 *  'date_time' : date & time(10 digit unix format) when the message is sent/received
 *  'message' : the chat message
 *
 */
exports.chatHistory = function(sess, other_user_id, number_of_message,callback) {

    var jsonAry = [];
    var my_user_id = sess.user_id;

    if(!my_user_id){
        jsonAry.push({
            code: "-1",
            msg: "Failed to authenticate, please login first",
            number_of_message: "0"
        });
        callback(jsonAry);
        return;

    }else if(!other_user_id || !number_of_message
        || other_user_id.trim().length == 0 || number_of_message.trim().length == 0){
        jsonAry.push({
            code: "-7",
            msg: "Required field not set",
            number_of_message: "0"
        });
        callback(jsonAry);
        return;

    }else if(!((/^\d+$/).test(number_of_message) && number_of_message >= 1 && number_of_message <= 100)){
        jsonAry.push({
            code: "-2",
            msg: "Requested number of messages is invalid: must be an integer between 1 and 100",
            number_of_message: "0"
        });
        callback(jsonAry);
        return;

    }else{
        // check whether other_user_id is valid
        models.User.find({_id: other_user_id},function (err, users) {

            if (!users){
                jsonAry.push({
                    code: "-3",
                    msg: "Invalid other_user_id",
                    number_of_message: "0"
                });
                callback(jsonAry);
                return;
            }else{
                models.ChatHistory.find({
                    $or : [
                        { $and : [ { sender_user_id : my_user_id }, { receiver_user_id : other_user_id } ] },
                        { $and : [ { sender_user_id : other_user_id }, { receiver_user_id : my_user_id } ] }
                    ]
                }, function (err2, records){

                    if(!records){
                        jsonAry.push({
                            code: "-4",
                            msg: "No record found",
                            number_of_message: "0"
                        });
                        callback(jsonAry);
                        return;
                    }

                    // return the number of messages client askes for
                    var max_num;
                    if(records.length >= number_of_message){
                        max_num = number_of_message;
                    }else{
                        max_num = records.length;
                    }

                    jsonAry.push({
                        code: "1",
                        msg: "Get chat histories successfully",
                        number_of_message: ""+max_num}
                    );

                    // change order to new -> old
                    records.reverse();

                    var tempJsonAry = [];

                    for(var i=0; i<max_num; i++) {
                        var isYourMsg;
                        if(records[i].sender_user_id == my_user_id){
                            isYourMsg = "1";
                        }else{
                            isYourMsg = "0";
                        }

                        // convert timestamp to PST
                        var timestamp = records[i]._id.getTimestamp();
                        timestamp  = Math.round((timestamp/1000) + (PST_DIFFERENCE * 60 * 60));

                        tempJsonAry.push({
                            is_your_message: isYourMsg,
                            date_time: timestamp,
                            message: records[i].message
                        });
                    }
                    // change to old -> new
                    tempJsonAry.reverse();
                    jsonAry.push.apply(jsonAry, tempJsonAry);

                    // done! return jsonArray
                    callback(jsonAry);
                    return;
                });
            }
        });
    }
}
