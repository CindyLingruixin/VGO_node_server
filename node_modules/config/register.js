var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var user = require('config/models');

/* Path: HOST/register
*  Return: JSON Object that contains 'code' & 'msg'
*
*  1 -> Successfully registered
* -2 -> Phone number already registered
* -3 -> Email already registered
* -5 -> Invalid phone number length
* -40 -> Password is too weak
* -60 -> Invalid phone number length
* -61 -> Phone number can only be number
* -300 -> Invalid first name format
* -301 -> Invalid last name format
*/

exports.register = function(phone_number, email, password, first_name, last_name, callback) {

    const MIN_PWD_LENGTH = 8;

    var phoneNumberValidation = /^\d+$/;
    if(!phoneNumberValidation.test(phone_number)){
        callback({
            'code' : "-61",
            'msg' : "Phone number can only be number"
        });
        return;
    }

    if(phone_number.length != 10 && phone_number.length != 11){
        callback({
            'code' : "-60",
            'msg' : "Invalid phone number length"
        });
        return;
    }

    var emailValidation = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if(!emailValidation.test(email)){
        callback({
            'code' : "-5",
            'msg' : "Invalid email format"
        });
        return;
    }

    if (!(password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)
        && password.match(/[0-9]/)
        && password.length >= MIN_PWD_LENGTH)) {
        callback({
            'code' : "-40",
            'msg': "Password is too weak"
        });
        return;
    }
    var nameValidation = /^[a-zA-Z ]{2,30}$/;
    if(!nameValidation.test(first_name)){
        callback({
            'code' : "-300",
            'msg': "Invalid first name format"
        });
        return;
    }

    if(!nameValidation.test(last_name)){
        callback({
            'code' : "-301",
            'msg': "Invalid last name format"
        });
        return;
    }

    // password encrytion
    var temp = rand(160, 36);
    var newpass = temp + password;
    var token = crypto.createHash('sha512').update(email + rand).digest("hex");
    var hashed_password = crypto.createHash('sha512').update(newpass).digest("hex");

    var newuser = new user
    ({
        token : token,
        phone_number : phone_number,
        hashed_password : hashed_password,
        email : email,
        first_name : first_name,
        last_name : last_name,
        salt :temp
    });

    user.find({phone_number: phone_number},function(err,users){

    if(users.length == 0){
        
        user.find({email: email},function(err2,users2){
            
            if(users2.length == 0){
                // save account to database
                newuser.save(function (err) {
                    callback({
                        'code' : "1",
                        'msg':"Sucessfully registered"
                    });
                });    
            }else{
                callback({
                    'code' : "-3",
                    'msg':"Email already registered"
                });
            }
        });
        
    }else{
        callback({
            'code' : "-2",
            'msg':"Phone number already registered"
        });
    }});


}
