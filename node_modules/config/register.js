/* PATH: host_url:8080/account/register
 *
 * INPUT:
 * 'objectid'
 * 'email'
 * 'password'
 * 'first_name'
 * 'last_name'
 * 'driver_license'
 * 'plate_number'
 * 'colour'
 * 'car_model' format example(2016-HONDA-SEDAN)
 * 
 * OUTPUT: JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *
 *  1 -> Successfully registered
 * -2 -> Invalid objectid
 * -3 -> User have not yet vertify
 * -4 -> Password is too weak
 * -5 -> Invalid email format
 * -300 -> Invalid first name format
 * -301 -> Invalid last name format
 */

var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var models = require('config/models');

exports.register = function(objectid, email, password, first_name, last_name, driver_license, plate_number, colour, car_model, callback) {

    const MIN_PWD_LENGTH = 8;


    var emailValidation = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if (email != null) {
        if (!emailValidation.test(email)) {
            callback({
                'code': "-5",
                'msg': "Invalid email format"
            });
            return;
        }
    }

    if (!(password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)
        && password.match(/[0-9]/)
        && password.length >= MIN_PWD_LENGTH)) {
        callback({
            'code': "-4",
            'msg': "Password is too weak"
        });
        return;
    }

    var nameValidation = /^[a-zA-Z ]{2,30}$/;
    if (!nameValidation.test(first_name)) {
        callback({
            'code': "-300",
            'msg': "Invalid first name format"
        });
        return;
    }

    if (!nameValidation.test(last_name)) {
        callback({
            'code': "-301",
            'msg': "Invalid last name format"
        });
        return;
    }

    var driver_flag = false;
    if (!driver_license || !plate_number || !colour || !car_model) {
        driver_flag = false;
        console.log('lack info to be a driver');
    } else {
        driver_flag = true;
        console.log('enough info to be a driver');
    }


    // password encrytion
    var temp = rand(160, 36);
    var newpass = temp + password;
    var token = crypto.createHash('sha512').update(email + rand).digest("hex");
    var hashed_password = crypto.createHash('sha512').update(newpass).digest("hex");
    console.log(token);
    models.User.findById(objectid, function (err, users) {
        console.log(users);
        if (users.length == 0) {
            callback({
                'code': "-2",
                'msg': "Invalid objectid"
            });
        } else {
            var uvf = users.vertity_flag;
            if (uvf == false) {
                callback({
                    'code': "-3",
                    'msg': "User have not yet vertify"
                });
            } else {
                if (driver_flag == true) {
                    console.log('register as both driver and user');
                    var query = {
                        token: token,
                        hashed_password: hashed_password,
                        email: email,
                        first_name: first_name,
                        last_name: last_name,
                        driver_flag: driver_flag,
                        driver_license: driver_license,
                        plate_number: plate_number,
                        colour: colour,
                        car_model: car_model,
                        salt: temp,
                        temp_str: String
                    }
                } else {
                    console.log('register only as user');
                    var query = {
                        token: token,
                        hashed_password: hashed_password,
                        email: email,
                        first_name: first_name,
                        last_name: last_name,
                        driver_flag: driver_flag,
                        salt: temp,
                        temp_str: String
                    }
                }

                models.User.findByIdAndUpdate(objectid, {$set: query}, function (err, result) {
                    if (err) {
                        console.log(err);
                    }
                    console.log("RESULT: " + result);
                });
                callback({
                    'code': "1",
                    'msg': 'Successfully registered'
                });
            }
        }
    })
}