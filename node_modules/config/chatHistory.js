/* Ask server for a number (between 1 to 100)
 * of chat histories(in order of old to new) between the caller and the other user
 *
 * PATH: host_url:8080/chat_history
 *
 * INPUT:
 *  'other_user_id' : the user id of the other user
 *  'number_of_message' : number of messages requesting
 *
 * OUTPUT:
 *  ** 1st JSON Object always contains
 *  'code' : respond code
 *  'msg' : respond message
 *  'number_of_message' : number of message returning
 *
 *  'code' & 'msg':
 *  1 -> Seccess
 * -1 -> Failed to authenticate, please login first
 * -2 -> Requested number of messages is invalid: must be an integer between 1 and 100
 * -3 -> Invalid other_user_id
 * -4 -> No record found
 * -7 -> Required field not set
 *
 *  ** 2nd and the rest of the JSON Objects (if there is any) contain
 *  'is_your_message' : you sent -> 1, you received -> 0
 *  'date_time' : date & time when the message is sent/received
 *  'message' : the chat message
 *
 */

var models = require('config/models');

exports.chatHistory = function(sess, other_user_id, number_of_message,callback) {

    var jsonAry = [];
    var your_user_id = sess.user_id;

    if(!your_user_id){
        jsonAry.push({code: "-1", msg: "Failed to authenticate, please login first", number_of_message: "0"});
        callback(jsonAry);
        return;

    }else if(!other_user_id || !number_of_message 
        || other_user_id.trim().length == 0 || number_of_message.trim().length == 0){
        jsonAry.push({code: "-7", msg: "Required field not set", number_of_message: "0"});
        callback(jsonAry);
        return;

    }else if(!((/^\d+$/).test(number_of_message) && number_of_message >= 1 && number_of_message <= 100)){
        jsonAry.push({code: "-2", msg: "Requested number of messages is invalid: must be an integer between 1 and 100", number_of_message: "0"});
        callback(jsonAry);
        return;

    }else{
        // check whether other_user_id is valid
        models.User.find({_id: other_user_id},function (err, users) {

            if (!users){
                jsonAry.push({code: "-3", msg: "Invalid other_user_id", number_of_message: "0"});
                callback(jsonAry);
                return;
            }else{
                models.ChatHistory.find({
                    $or : [
                        { $and : [ { sender_user_id : your_user_id }, { receiver_user_id : other_user_id } ] },
                        { $and : [ { sender_user_id : other_user_id }, { receiver_user_id : your_user_id } ] }
                    ]
                }, function (err2, records){

                    if(!records){
                        jsonAry.push({code: "-4", msg: "No record found", number_of_message: "0"});
                        callback(jsonAry);
                        return;
                    }

                    // return the number of messages client askes for
                    var max_num;
                    if(records.length >= number_of_message){
                        max_num = number_of_message;
                    }else{
                        max_num = records.length;
                    }

                    jsonAry.push({code: "1", msg: "Seccess", number_of_message: ""+max_num});

                    // change order to new -> old
                    records.reverse();

                    var tempJsonAry = [];

                    for(var i=0; i<max_num; i++) {
                        var isYourMsg;
                        if(records[i].sender_user_id == your_user_id){
                            isYourMsg = "1";
                        }else{
                            isYourMsg = "0";
                        }
                        tempJsonAry.push({
                            is_your_message: isYourMsg,
                            date_time: (records[i]._id.getTimestamp().toDateString() +" "+ records[i]._id.getTimestamp().toTimeString()).substring(0,21),
                            message: records[i].message
                        });
                    }
                    // change to old -> new
                    tempJsonAry.reverse();
                    jsonAry.push.apply(jsonAry, tempJsonAry);

                    // done! return jsonArray
                    callback(jsonAry);
                    return;
                });
            }
        });
    }
}